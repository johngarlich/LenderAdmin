{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "MongoCalls"
    },
    "designerId": "2e630136-c544-4319-b276-4875fb631dd4",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getAllLenders",
                "implHandler": [
                    "var collectionName = \"lenders\";",
                    "var mongoCall      = \"getDocs\";",
                    "var lenderState    = Ext.ComponentQuery.query('#stateFiltercbo')[0].getValue();",
                    "var query          = {\"lenderState\":lenderState};",
                    "var store          = Ext.getStore('Lenders');",
                    "store.removeAll();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/\" + mongoCall,",
                    "    success: function(response,err){",
                    "        var docsArray = JSON.parse(response.responseText);",
                    "        store = Ext.getStore(\"Lenders\");",
                    "        Ext.Array.forEach(docsArray,function(item,index,self){",
                    "            store.add(item);",
                    "        });",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"wasn't able to get docs from collection \" + collectionName);",
                    "    },",
                    "    method: 'GET',",
                    "    params: {",
                    "        \"query\"      :JSON.stringify(query),",
                    "        \"collectionS\":collectionName",
                    "    }",
                    "});",
                    ""
                ]
            },
            "name": "getAllLenders",
            "designerId": "6849a480-14cc-41a6-8244-72f8380f040b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#lenderIdcbo",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onLenderIdcboSelect",
                "implHandler": [
                    "",
                    "var form = Ext.ComponentQuery.query('#lendersfrm')[0];",
                    "form.getForm().setValues(records[0].data);",
                    "// you have to set the _id field to mongoId",
                    "Ext.ComponentQuery.query('field[name=mongoId]')[0].setValue(records[0].data._id);",
                    "",
                    "// set the store values for dealerId",
                    "// load the dealerIds into the grid",
                    "var dealers = records[0].data.dealerIds;",
                    "var dealerId  = {};",
                    "var dealerIds = [];",
                    "Ext.Array.forEach(dealers, function(item,index,self){",
                    "    dealerId = {",
                    "        dealerId:item",
                    "    };",
                    "    dealerIds.push(dealerId);",
                    "});",
                    "store = Ext.getStore('DealerIdsGrid');",
                    "store.loadData(dealerIds);",
                    "",
                    "// make a mongo call to get the matching reservePercentage and lendersDealerId if it exists",
                    "this.getReservePercentageAndLendersDealerId();",
                    "",
                    "//",
                    "",
                    "var lenderId    = Ext.ComponentQuery.query('#lenderIdcbo')[0].getValue();",
                    "var dealerId    = Ext.ComponentQuery.query('#dealerIdscbo')[0].getValue();",
                    "var lenderState = Ext.ComponentQuery.query('#lenderStatecbo')[0].getValue();",
                    "var financeType = Ext.ComponentQuery.query('#financeTypecbo')[0].getValue();",
                    "Ext.ComponentQuery.query('#lenderIdReq')[0].setValue(lenderId);",
                    "Ext.ComponentQuery.query('#dealerIdReq')[0].setValue(dealerId);",
                    "Ext.ComponentQuery.query('#lenderStateReq')[0].setValue(lenderState);",
                    "Ext.ComponentQuery.query('#financeTypeReq')[0].setValue(financeType);",
                    "this.getLenderFormReqs();",
                    "",
                    "",
                    ""
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "onLenderIdcboSelect",
            "designerId": "241bc5f9-3016-4206-985b-24f728605a50"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#updatebtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onUpdatebtnClick",
                "implHandler": [
                    "// calc updateDoc",
                    "var updateDoc = Ext.ComponentQuery.query('#lendersfrm')[0].getForm().getValues();",
                    "delete updateDoc.mongoIdLD;",
                    "delete updateDoc.reservePercentage;",
                    "delete updateDoc.lendersDealerId;",
                    "delete updateDoc.filterState;",
                    "delete updateDoc.dealerIds;",
                    "delete updateDoc.mongoId;",
                    "",
                    "var dealerIds = [];",
                    "var store = Ext.getStore('DealerIdsGrid');",
                    "var values = store.data.items;",
                    "Ext.Array.forEach(values, function(item,index,self){",
                    "    dealerIds.push(item.data.dealerId);",
                    "});",
                    "updateDoc.dealerIds = dealerIds;",
                    "// calc queryDoc",
                    "var lenderId    = Ext.ComponentQuery.query('field[name=lenderId]')[0].getValue();",
                    "var dealerId    = Ext.ComponentQuery.query('field[name=dealerIds]')[0].getValue();",
                    "var financeType = Ext.ComponentQuery.query('field[name=financeType]')[0].getValue();",
                    "var lenderState = Ext.ComponentQuery.query('field[name=lenderState]')[0].getValue();",
                    "if(!lenderId || !dealerId || !financeType || !lenderState){",
                    "    alert('you have to fill out lenderId, dealerId, lenderState and financeType otherwise you cannot save a record');",
                    "    return;",
                    "}",
                    "var queryDoc = {",
                    "    lenderId   :lenderId,",
                    "    financeType:financeType,",
                    "    lenderState:lenderState",
                    "};",
                    "",
                    "// set collectionName",
                    "var collectionName = \"lenders\";",
                    "",
                    "// set mongoCall",
                    "var mongoCall = \"upsertDoc\";",
                    "",
                    "this.upsertLenderRecord(collectionName,queryDoc,updateDoc,mongoCall);",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onUpdatebtnClick",
            "designerId": "a325491c-05ab-4da9-81e2-3abcdd448b48"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#lendersfrm",
                "designer|targetType": "Ext.form.Panel",
                "fn": "onLendersfrmAfterRender",
                "implHandler": [
                    "this.getAllLenders();",
                    "//this.getAllForms();"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "onLendersfrmAfterRender",
            "designerId": "7020d763-fea8-46ff-ba56-51fbe9d6ff61"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#stateFiltercbo",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onStateFiltercboChange",
                "implHandler": [
                    "this.getAllLenders();"
                ],
                "name": "change",
                "scope": "me"
            },
            "name": "onStateFiltercboChange",
            "designerId": "2cfe1da0-78b2-435f-88bf-c8f182844ad1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#lenderIdcbo",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onLenderIdcboExpand",
                "implHandler": [
                    "",
                    "this.getAllLenders();"
                ],
                "name": "expand",
                "scope": "me"
            },
            "name": "onLenderIdcboExpand",
            "designerId": "3b5ebfd6-9838-4c50-95f1-3c59f4e47eef"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getAllForms",
                "implHandler": [
                    "var collectionName = \"forms\";",
                    "var query          = {};",
                    "query              = JSON.stringify(query);",
                    "",
                    "var store          = Ext.getStore('Forms');",
                    "store.removeAll();",
                    "this.getAllDocs(collectionName,query,store);",
                    ""
                ]
            },
            "name": "getAllForms",
            "designerId": "74c92234-557c-4f16-af01-5a744da5bd45"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "collectionName",
                    "query",
                    "store"
                ],
                "fn": "getAllDocs",
                "implHandler": [
                    "scope = this;",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/getDocs\",",
                    "    success: function(response,err){",
                    "        var docsArray = JSON.parse(response.responseText);",
                    "",
                    "        store.clearFilter();",
                    "        store.loadData(docsArray);",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"wasn't able to get docs from collection \" + collectionName);",
                    "    },",
                    "    method: 'GET',",
                    "    params: {",
                    "        \"query\"      :query,",
                    "        \"collectionS\":collectionName",
                    "    }",
                    "});",
                    ""
                ]
            },
            "name": "getAllDocs",
            "designerId": "3660ddd3-5126-4a0f-8991-abb3bf7b7f05"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "collectionName",
                    "mongoId",
                    "store"
                ],
                "fn": "getDocById",
                "implHandler": [
                    "var scope = this;",
                    "",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/getDocById\",",
                    "    success: function(response,err){",
                    "        if (response.responseText==\"false\"){",
                    "            alert(\"did not get the document from \" + collectionName);",
                    "",
                    "        }",
                    "        else {",
                    "            debugger;",
                    "            var docs = JSON.parse(response.responseText);",
                    "            var doc  = docs[0];",
                    "            ",
                    "            store.add(doc);",
                    "        }",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"Did not get doc from \" + collectionName);",
                    "    },",
                    "    method: 'GET',",
                    "    params: {",
                    "        \"collectionS\":collectionName,",
                    "        \"mongoId\"    :mongoId",
                    "    }",
                    "});"
                ]
            },
            "name": "getDocById",
            "designerId": "478461b2-c98d-4d3c-9228-b4dfd27b9dc6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "collectionName",
                    "mongoIds",
                    "store"
                ],
                "fn": "getDocsByIds",
                "implHandler": [
                    "var scope = this;",
                    "",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/getDocById\",",
                    "    success: function(response,err){",
                    "        if (JSON.parse(response.responseText).error){",
                    "            alert(\"did not get the document from \" + collectionName);",
                    "",
                    "        }",
                    "        else {",
                    "",
                    "            var docs = (JSON.parse(response.responseText).result);",
                    "",
                    "            store.add(docs);",
                    "        }",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"Did not get doc from \" + collectionName);",
                    "    },",
                    "    method: 'GET',",
                    "    params: {",
                    "        \"collectionS\":collectionName,",
                    "        \"mongoId\"    :JSON.stringify(mongoIds)",
                    "    }",
                    "});"
                ]
            },
            "name": "getDocsByIds",
            "designerId": "c65eedb5-86c7-4311-996f-5db633996a52"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getReservePercentageAndLendersDealerId",
                "implHandler": [
                    "var collectionName = \"lenderDealer\";",
                    "var mongoCall      = \"getDocs\";",
                    "// create query",
                    "var dealerId       = Ext.ComponentQuery.query('field[name=dealerIds]')[0].getValue();",
                    "var lenderId       = Ext.ComponentQuery.query('field[name=lenderId]')[0].getValue();",
                    "var financeType    = Ext.ComponentQuery.query('field[name=financeType]')[0].getValue();",
                    "var query          = {\"dealerId\":dealerId,\"lenderId\":lenderId,\"financeType\":financeType};",
                    "",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/\" + mongoCall,",
                    "    success: function(response,err){",
                    "        var docsArray = JSON.parse(response.responseText);",
                    "",
                    "        var doc = docsArray[0];",
                    "        if(Ext.isDefined(doc)){",
                    "            Ext.ComponentQuery.query('field[name=reservePercentage]')[0].setValue(doc.reservePercentage);",
                    "            Ext.ComponentQuery.query('field[name=lendersDealerId]')[0].setValue(doc.lendersDealerId);",
                    "            Ext.ComponentQuery.query('field[name=mongoIdLD]')[0].setValue(doc._id);",
                    "",
                    "        }",
                    "        else {",
                    "",
                    "            Ext.ComponentQuery.query('field[name=reservePercentage]')[0].setValue(\"\");",
                    "            Ext.ComponentQuery.query('field[name=lendersDealerId]')[0].setValue(\"\");",
                    "            Ext.ComponentQuery.query('field[name=mongoIdLD]')[0].setValue(\"\");",
                    "            alert('there is no lenderDealer record matching this lender');",
                    "        }",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"wasn't able to get docs from collection \" + collectionName);",
                    "    },",
                    "    method: 'GET',",
                    "    params: {",
                    "        \"query\"      :JSON.stringify(query),",
                    "        \"collectionS\":collectionName",
                    "    }",
                    "});",
                    ""
                ]
            },
            "name": "getReservePercentageAndLendersDealerId",
            "designerId": "8daafdb0-a99c-4db0-a98d-efadbc6f0994"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "collectionName",
                    "doc"
                ],
                "fn": "insertDoc",
                "implHandler": [
                    "var scope = this;",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/insertDoc\",",
                    "    success: function(response,err){",
                    "",
                    "        if(response.responseText === false){",
                    "            alert('no insert');",
                    "        }",
                    "        else {",
                    "            var insertedDoc = JSON.parse(response.responseText);",
                    "            var mongoIdReq  = insertedDoc._id;",
                    "            Ext.ComponentQuery.query('field[name=mongoIdReq]')[0].setValue(mongoIdReq);",
                    "        }",
                    "",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"No insert\");",
                    "    },",
                    "    method: 'POST',",
                    "    params: {",
                    "        \"collectionS\":collectionName,",
                    "        \"doc\"        :JSON.stringify(doc)",
                    "    }",
                    "});"
                ]
            },
            "name": "insertDoc",
            "designerId": "f88b3fdc-fcaf-46f5-a00f-c10357032f5c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "collectionName",
                    "updateDoc",
                    "mongoId"
                ],
                "fn": "upsertDocById",
                "implHandler": [
                    "var scope = this;",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/upsertDocById\",",
                    "    success: function(response,err){",
                    "        if(response.responseText === false){",
                    "            alert('no upsert');",
                    "        }",
                    "        else {",
                    "            var upsertedDoc = JSON.parse(response.responseText);",
                    "            var mongoId     = response.request.options.params.mongoId;",
                    "",
                    "            switch(collectionName){",
                    "                case \"coreLenderForms\":",
                    "                    alert('upserted coreLenderForms by Id');",
                    "                    Ext.ComponentQuery.query('field[name=mongoIdReq]')[0].setValue(mongoId);",
                    "                    break;",
                    "                case \"lenders\":",
                    "                     alert('upserted lender by Id');",
                    "                    Ext.ComponentQuery.query('field[name=mongoId]')[0].setValue(mongoId);",
                    "                    break;",
                    "                case \"lenderDealer\":",
                    "                     alert('upserted lenderDealer by Id');",
                    "                    Ext.ComponentQuery.query('field[name=mongoIdLD]')[0].setValue(mongoId);",
                    "                    break;",
                    "            }",
                    "",
                    "        }",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"No upsert\");",
                    "    },",
                    "    method: 'POST',",
                    "    params: {",
                    "        \"collectionS\":collectionName,",
                    "        \"updateDoc\"  :JSON.stringify(updateDoc),",
                    "        \"mongoId\"    :mongoId",
                    "    }",
                    "});"
                ]
            },
            "name": "upsertDocById",
            "designerId": "999cbdd4-26a7-401b-886d-6c458b185ca0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "collectionName",
                    "queryDoc",
                    "updateDoc"
                ],
                "fn": "upsertLenderRecord",
                "implHandler": [
                    "var scope = this;",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/upsertDoc\",",
                    "    success: function(response,err){",
                    "",
                    "        if(response.responseText === false){",
                    "            alert('no upsert');",
                    "        }",
                    "        else {",
                    "            //upsert the lenderDealerRecord",
                    "            alert('upserted Lender Record');",
                    "            scope.upsertLenderDealerRecord();",
                    "        }",
                    "",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"No upsert\");",
                    "    },",
                    "    method: 'POST',",
                    "    params: {",
                    "        \"collectionS\":collectionName,",
                    "        \"updateDoc\"  :JSON.stringify(updateDoc),",
                    "        \"queryDoc\"   :JSON.stringify(queryDoc)",
                    "    }",
                    "});"
                ]
            },
            "name": "upsertLenderRecord",
            "designerId": "61c8655f-a0c2-478e-8b85-7decccdc1724"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "upsertLenderDealerRecord",
                "implHandler": [
                    "var collectionName = \"lenderDealer\";",
                    "var mongoCall      = \"upsertDoc\";",
                    "var dealerId       = Ext.ComponentQuery.query('field[name=dealerIds]')[0].getValue();",
                    "var lenderId       = Ext.ComponentQuery.query('field[name=lenderId]')[0].getValue();",
                    "var financeType    = Ext.ComponentQuery.query('field[name=financeType]')[0].getValue();",
                    "var query          = {\"dealerId\":dealerId,\"lenderId\":lenderId,\"financeType\":financeType};",
                    "",
                    "var updateDoc = {",
                    "    lenderId:lenderId,",
                    "    financeType:financeType,",
                    "    dealerId:dealerId,",
                    "    reservePercentage:Ext.ComponentQuery.query(\"field[name=reservePercentage]\")[0].getValue(),",
                    "    lendersDealerId  :Ext.ComponentQuery.query(\"field[name=lendersDealerId]\")[0].getValue()",
                    "};",
                    "",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/\" + mongoCall,",
                    "    success: function(response,err){",
                    "",
                    "        if(response.responseText === false){",
                    "            alert('no upsert of '+collectionName);",
                    "        }",
                    "        else {",
                    "            alert(\"upserted the lenderDealerRecord\");",
                    "        }",
                    "",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"wasn't able to upsert the lenderDealer record\");",
                    "    },",
                    "    method: 'POST',",
                    "    params: {",
                    "        \"queryDoc\"   :JSON.stringify(query),",
                    "        \"collectionS\":collectionName,",
                    "        \"updateDoc\"  :JSON.stringify(updateDoc)",
                    "    }",
                    "});",
                    ""
                ]
            },
            "name": "upsertLenderDealerRecord",
            "designerId": "3c38ac0f-9baa-4b9e-b1cc-1687281dbb24"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#deletebtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onDeletebtnClick",
                "implHandler": [
                    "var mongoId = Ext.ComponentQuery.query('field[name=mongoId]')[0].getValue();",
                    "if(!mongoId){",
                    "    alert(\"you can't delete a record that doesn't exist in mongo\");",
                    "}",
                    "else {",
                    "    this.deleteLenderRecordById(mongoId,\"lenders\",\"deleteDoc\");",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onDeletebtnClick",
            "designerId": "cc87ec4d-707d-4e20-8ddd-4648f209e1d0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "mongoId",
                    "collectionName"
                ],
                "fn": "deleteLenderRecordById",
                "implHandler": [
                    "var scope = this;",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/deleteDocById\",",
                    "    success: function(response,err){",
                    "        if(response.responseText===true){",
                    "            alert('deleted Lender Record from this state');",
                    "        }",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"wasn't able to delete doc from collection: \" + collectionName);",
                    "    },",
                    "    method: 'GET',",
                    "    params: {",
                    "        \"mongoId\"    :mongoId,",
                    "        \"collectionS\":collectionName",
                    "    }",
                    "});"
                ]
            },
            "name": "deleteLenderRecordById",
            "designerId": "44639aaf-07e3-4e97-864d-1f1948228782"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getLenderFormReqs",
                "implHandler": [
                    "var collectionName = \"coreLenderForms\";",
                    "",
                    "//var lenderState    = Ext.ComponentQuery.query('field[name=lenderState]')[0].getValue();",
                    "var lenderId       = Ext.ComponentQuery.query('field[name=lenderId]')[0].getValue();",
                    "var dealerId       = Ext.ComponentQuery.query('field[name=dealerIds]')[0].getValue();",
                    "var financeType    = Ext.ComponentQuery.query('field[name=financeType]')[0].getValue();",
                    "var query          = {lenderId:lenderId, dealerId:dealerId, financeType:financeType};",
                    "var store          = Ext.getStore('FormRequirements');",
                    "var coreReqs       = [];",
                    "var coreReq        = {};",
                    "store.removeAll();",
                    "scope = this;",
                    "Ext.Ajax.request({",
                    "    url: nodeJsService + \"collection/getDocs\",",
                    "    success: function(response,err){",
                    "        var docs = JSON.parse(response.responseText);",
                    "        if(docs.length===0){",
                    "            // set mongoIdReqs to \"\"",
                    "            Ext.ComponentQuery.query('field[name=mongoIdReq]')[0].setValue(\"\");",
                    "        }",
                    "        else {",
                    "            var doc  = docs[0];",
                    "            Ext.ComponentQuery.query('field[name=mongoIdReq]')[0].setValue(doc._id);",
                    "            //store.loadData(doc.formReqs);",
                    "            Ext.Array.each(doc.formReqs, function(item,index,self){",
                    "                coreReq = {",
                    "                    _id:item._id,",
                    "                    formCategory:item.formCategory,",
                    "                    formType:item.formType,",
                    "                    formId:item.formId,",
                    "                    publicName:item.publicName",
                    "                };",
                    "                coreReqs.push(coreReq);",
                    "            });",
                    "            store.loadData(coreReqs);",
                    "        }",
                    "",
                    "    },",
                    "    failure: function(response,err){",
                    "        alert(\"wasn't able to get docs from collection \" + collectionName);",
                    "    },",
                    "    method: 'GET',",
                    "    params: {",
                    "        \"query\"      :JSON.stringify(query),",
                    "        \"collectionS\":collectionName",
                    "    }",
                    "});",
                    ""
                ]
            },
            "name": "getLenderFormReqs",
            "designerId": "48245539-be12-44e6-92f5-5b44e86f2e99"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#refreshFormsListbtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onRefreshFormsListbtnClick",
                "implHandler": [
                    "Ext.ComponentQuery.query('#formTypeFiltercbo')[0].setValue(\"\");",
                    "this.getAllForms();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onRefreshFormsListbtnClick",
            "designerId": "65119053-6a40-43cd-9803-df6b6871d26d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#saveLenderReqs",
                "designer|targetType": "Ext.button.Button",
                "fn": "onSaveLenderReqsClick",
                "implHandler": [
                    "var lenderReqs = {};",
                    "var lenderIdReq    = Ext.ComponentQuery.query('field[name=lenderIdReq]')[0].getValue();",
                    "var dealerIdReq    = Ext.ComponentQuery.query('field[name=dealerIdReq]')[0].getValue();",
                    "var lenderStateReq = Ext.ComponentQuery.query('field[name=lenderStateReq]')[0].getValue();",
                    "var financeTypeReq = Ext.ComponentQuery.query('field[name=financeTypeReq]')[0].getValue();",
                    "var mongoIdReq     = Ext.ComponentQuery.query('field[name=mongoIdReq]')[0].getValue();",
                    "var store = Ext.getStore('FormRequirements');",
                    "var values = store.data.items;",
                    "var formReq  = {};",
                    "var formReqs = [];",
                    "Ext.Array.forEach(values, function(item,index,self){",
                    "",
                    "    formReq = {",
                    "        \"_id\"        : item.data._id,",
                    "        formCategory : item.data.formCategory,",
                    "        formType     : item.data.formType,",
                    "        formId       : item.data.formId,",
                    "        publicName   : item.data.publicName",
                    "",
                    "    };",
                    "",
                    "    formReqs.push(formReq);",
                    "});",
                    "",
                    "lenderReqs = {",
                    "    lenderId   : lenderIdReq,",
                    "    dealerId   : dealerIdReq,",
                    "    lenderState: lenderStateReq,",
                    "    financeType: financeTypeReq,",
                    "    formReqs   : formReqs",
                    "};",
                    "var doc            = lenderReqs;",
                    "var collectionName = \"coreLenderForms\";",
                    "if (mongoIdReq === \"\"){",
                    "    this.insertDoc(collectionName,doc);",
                    "}",
                    "else {",
                    "    this.upsertDocById(collectionName,doc,mongoIdReq);",
                    "}",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onSaveLenderReqsClick",
            "designerId": "94337192-f6bf-415a-995e-6e72ce68f6c2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#saveEntireLenderReqsbtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onSaveEntireLenderReqsbtnClick",
                "name": "click",
                "scope": "me"
            },
            "name": "onSaveEntireLenderReqsbtnClick",
            "designerId": "182331b4-cf84-4173-bd79-4875d017fd26"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "mongoIds"
                ],
                "fn": "getFormRequirementsFromFormsCollection",
                "implHandler": [
                    "var collectionName = \"forms\";",
                    "var store = Ext.getStore(\"FormRequirements\");",
                    "var me = this;",
                    "Ext.Array.each(mongoIds,function(item,index,self){",
                    "   me.getDocById(collectionName,item,store);",
                    "});",
                    ""
                ]
            },
            "name": "getFormRequirementsFromFormsCollection",
            "designerId": "436f231e-df44-4c7f-8606-f26a246e8184"
        }
    ]
}